@page "/"

@inject IDataLayer DataLayer

@{
    RenderFragment ColumnHeader(string field, string caption) =>
    @<th @onclick=@(async () => await HeaderClick(field))>
        @((MarkupString)caption) <SortIndicator Field=@field SortField=@SortField Desc=@SortDesc />
    </th>;
}

@if (Countries != null) {
    <h4>Showing top 10 countries sorted by "@SortField"@(SortDesc ? ", descending" : "")</h4>

    <div class="container-fluid">
        <div class="row">
            <div class="col-7">
                <table class="table m-4 country-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            @ColumnHeader("name", "Country")
                            @ColumnHeader("areaKM2", "Area in KM<sup>2</sup>")
                            @ColumnHeader("population", "Population")
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var country in Countries) {
                            <tr class="@TableRowClass(country._id)">
                                <td>@country._id</td>
                                <td>@country.name</td>
                                <td>@country.areaKM2</td>
                                <td>@country.population</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
            <div class="col-5">
                <CountryChart Data="@Countries" OnChartPointClicked="@ChartPointClicked" />
            </div>
        </div>
    </div>
}
else {
    <p>Loading country data...</p>
}

@code {
    Country[] Countries { get; set; }

    protected override async Task OnInitializedAsync() {
        await LoadData();
    }

    async Task LoadData() {
        Countries = await DataLayer.FetchCountries(SortField, SortDesc);
    }

    string SortField { get; set; } = "population";
    bool SortDesc { get; set; } = true;

    async Task HeaderClick(string field) {
        if (field == SortField) {
            SortDesc = !SortDesc;
        }
        else {
            SortField = field;
            SortDesc = false;
        }

        await LoadData();
    }

    string FocusedCountryId { get; set; }

    void ChartPointClicked(string id) {
        FocusedCountryId = id;
        StateHasChanged();
    }

    string TableRowClass(string id) => id == FocusedCountryId ? "table-info" : "";
}